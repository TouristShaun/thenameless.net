@use '@/styles/token' as t;

.playground {
  gap: t.$space-6;

  @include t.device(llt) {
    display: flex;
    flex-direction: column;
    margin-block: t.$space-6;
  }
  @include t.device(lt) {
    --col: 2;
    --size: 64rem;
    grid-column: 1 / -1 !important; /* override parent's value */
    display: grid;
    grid-template-columns: repeat(var(--col), 1fr);
    inline-size: 100%;
    max-inline-size: calc(var(--size) - 2 * var(--page-pad));
    margin-block: t.$space-12;
    margin-inline: auto;

    &.has-system {
      --col: 3;
      --size: 90rem;
    }
    &.has-input {
      --col: 2;
      --size: 64rem;
    }
  }
}

.prompt {
  display: flex;
  flex-direction: column;
  gap: t.$space-3;
  block-size: 100%;
  padding-block-start: t.$space-3;
  padding-block-end: t.$space-2; /* alignment */
  padding-inline-start: t.$space-3;
  border: 1px solid var(--secondary-border);
  border-inline-start: 2px solid var(--primary-border);
  border-radius: 1px;
  background-color: var(--background);
  color: var(--color);
}

.normal {
  @extend .prompt;
  --primary-border: #{t.$gray-5};
  --secondary-border: #{t.$gray-1}80;
  --background: #{t.$gray-0}80;
  --color: #{t.$gray-8};
}

.system {
  @extend .normal;
}

.user {
  @extend .normal;

  @include t.device(lt) {
    .playground.has-input:not(.has-system) > & {
      grid-column: 1 / -1;
      max-inline-size: max-content;
      margin-inline: auto;
    }
  }
}

.assistant {
  @extend .prompt;
  --primary-border: #{t.$violet-5};
  --secondary-border: #{t.$violet-1}80;
  --background: #{t.$violet-0}80;
  --color: #{t.$violet-8};
}

.label {
  @include t.font(12, 12, 0.1);
  color: var(--primary-border);
  font-family: t.$font-label;
  text-transform: uppercase;
}

.content {
  @include t.font(17, 25);
  max-block-size: 50dvh;
  max-inline-size: 40rem;
  padding-inline-end: t.$space-3;
  overflow-y: auto;
  font-family: t.$font-body;
  scrollbar-width: thin;
  white-space: pre-wrap;
}

.io {
  .playground.has-input > & {
    gap: t.$space-6;

    @include t.device(llt) {
      display: flex;
      flex-direction: column;
    }
    @include t.device(lt) {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(var(--size), auto);
      grid-auto-flow: column;
    }
  }
}

.params {
  @extend .normal;
}

.params-grid {
  display: grid;
  grid-template-columns: auto 1fr;
  column-gap: t.$space-3;
  row-gap: t.$space-2;
}

.ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.param-key {
  @extend .ellipsis;
  @include t.font(17, 25);
  max-inline-size: 8rem;
  font-family: t.$font-body;

  &::before {
    content: '{{';
  }
  &::after {
    content: '}}:';
  }
}

.param-value {
  @extend .content;
}
