@use '@/styles/token' as t;
@use './base.module.scss';

.playground {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: calc(-1 * var(--space));
    left: calc(-1 * var(--space));
    z-index: -1;
    block-size: calc(100% + 2 * var(--space));
    inline-size: calc(100% + 2 * var(--space));
    outline: 1px solid #{t.$purple-1}80;
    border-radius: 1px;

    @include t.device(ltb) {
      --space: #{t.$space-3};
    }
    @include t.device(tb) {
      --space: #{t.$space-6};
    }
  }
}

.header {
  position: relative;
  left: -1 * t.$space-1; /* alignment with run button */
  margin-block-end: t.$space-3;

  @include t.device(ltb) {
    margin-block-start: t.$space-3;
  }
}

.editable-section {
  @extend .section;
  /* reset */
  --background: transparent;
  --secondary: transparent;

  block-size: max-content;
  padding: 0;
  border: none;

  @include t.device(lt) {
    margin-block-start: 1px; /* border alignment */
  }

  & > label {
    @include t.font(11, 11, 0.1);
    color: var(--label-color);

    @include t.device(lt) {
      position: relative;
      top: calc(#{t.$space-3} + 0.6em); /* alignment */
      left: 0.5em;
      max-inline-size: max-content;
      margin-block-start: -1 * t.$space-6;
      margin-block-end: 0; /* reset */
      padding-inline: t.$space-2;
      border-radius: 1px;
      background-color: white;
    }
  }
}

.system {
  @extend .editable-section;
}

.prompt {
  display: flex;
  flex-direction: column;
  gap: t.$space-6;

  @include t.device(lt) {
    .playground.has-input:not(.has-system) > & {
      grid-column: 1 / -1;
      inline-size: 40rem;
      margin-inline: auto;
    }
  }
}

.user {
  @extend .editable-section;
}

.assistant {
  @extend .section;
}

.placeholder {
  color: t.$gray-4;
}

.io {
  .playground.has-input > & {
    gap: t.$space-6;

    @include t.device(llt) {
      display: flex;
      flex-direction: column;
    }
    @include t.device(lt) {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(var(--size), auto);
      grid-auto-flow: column;
    }
  }
}

.params {
  @extend .editable-section;

  @include t.device(lt) {
    margin-block-start: t.$space-3; /* alignment with assistant */
  }
}

.params-grid {
  display: grid;
  grid-template-columns: auto 1fr;
  column-gap: t.$space-3;
  row-gap: t.$space-2;
}

.ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.param-key {
  @extend .ellipsis;
  @include t.font(17, 25);
  max-inline-size: 8rem;
  padding-block-start: t.$space-3; /* alignment with baseline */
  font-family: t.$font-body;

  &::before {
    content: '{{';
  }
  &::after {
    content: '}}:';
  }
}

.param-value {
  @extend .editable-section;
}

.metric {
  display: grid;
  grid-template-columns: auto 1fr auto 1fr;
  grid-template-rows: repeat(2, auto);
  gap: t.$space-2;
  margin-inline-end: t.$space-3;
  padding-block-start: t.$space-3;
  border-block-start: 1px solid #{t.$gray-1}80;
  color: t.$gray-5;
}

.metric-item {
  list-style: none;

  &:nth-child(odd) {
    grid-column: 1 / 3;
  }
  &:nth-child(even) {
    grid-column: 3 / 5;
  }

  @include t.device(ltb) {
    display: flex;
    flex-direction: column;
    gap: t.$space-1;
  }
  @include t.device(tb) {
    display: grid;
    grid-template-columns: subgrid;
    align-items: baseline;
  }
}

.metric-label {
  @include t.font(10, 10, 0.1);
  color: var(--label-color);
  font-family: t.$font-label;
  text-transform: uppercase;

  @include t.device(ltb) {
    &::after {
      content: ': ';
    }
  }
}

.metric-value {
  @include t.font(14, 18);
  font-family: t.$font-body;

  @include t.device(tb) {
    &::before {
      position: relative;
      left: -1 * t.$space-1;
      content: ':\00a0\00a0';
    }
  }
}
